apply plugin: net.contrapt.kt2ts.Kt2TsPlugin

dependencies {
    compile "org.gradle:gradle-tooling-api:$gradle_version"
    //compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile project(":plugin-model")
    compile group: "net.contrapt.jvmcode", name: "jvmcode-model", version: jvmcode_version, changing: true

    compileOnly "io.vertx:vertx-core:$vertx_version"
    compileOnly gradleApi()

    runtime "ch.qos.logback:logback-classic:1.2.3"
    
    testCompile gradleApi()
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
}

jar {
    manifest {
        attributes 'Main-Class': 'net.contrapt.gradle.Application'
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    from  configurations.compileOnly.collect {
        def i1 = it.name.contains('gradle') ? zipTree(it).matching {include '**org/gradle/internal/exceptions/**'} : []
        def i2 = [] //it.name.contains('gradle') ? zipTree(it).matching {include '**/GradleException**'} : []
        [i1, i2]
    }
}

task deploy(type: Copy, dependsOn: ['deployJar', 'deployTs']) {
}

task deployTs(type: Copy, dependsOn: ['kt2ts']) {
    // Typescript defs
    from ("${project.buildDir}/kt2ts") {
        include "models.d.ts"
        rename "models.d.ts", "index.d.ts"
    }
    into "${project.rootDir}/node_modules/server-models"
}

k2ts {
    jarFile = "${project.buildDir}/libs/${jar.archiveName}"
    packages += [
          "net.contrapt.gradle.model"
    ]
    outFile = "models.d.ts"
    moduleName = "server-models"
}
kt2ts.dependsOn = ['jar']

task deployJar(type: Copy, dependsOn: ['assemble']) {
    from ("${project.buildDir}/libs") {
        include jar.archiveName
        rename jar.archiveName, 'vsc-gradle.jar'
    }
    into "${project.rootDir}/out"
}

jar {
    from project(":plugin-model").sourceSets.main.output
}